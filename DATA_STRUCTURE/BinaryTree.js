// 二叉树：树中每个节点最多只能有两个子节点
// 二叉树可以为空

// 特性
// 第i层最大节点数：2^(i-1), i >= 1;
// 深度为k的二叉树有最大节点总数为：2^k - 1, k >= 1;
// 对任何非空二叉树T，若n0表示叶节点的个数，n2是度为2的非叶节点个数，那么两者免租关系n0 = n2 + 1;

// 满二叉树：节点全满
// 完全二叉树:除二叉树最后一层外,其他各层的节点数都达到最大个数
//          且最后一层从左向右的叶节点连续存在，只缺右侧若干节点

// 二叉树的存储：常见方法是数组和链表

// 二叉搜索树(BST:二叉排序树)
// 特性:
// 非空左子树的所有键值小于其根节点的键值
// 非空右子树的所有键值大于其根节点的键值
// 左、右子树本身也都是二叉搜索树

class BinarySearchTree {

}