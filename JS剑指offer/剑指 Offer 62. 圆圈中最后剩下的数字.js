// 0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。

// 例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。

// 示例 1：
// 输入: n = 5, m = 3
// 输出: 3

// 示例 2：
// 输入: n = 10, m = 17
// 输出: 2

// 方法一：动态规划
// dp[i]表示i个数字里幸存者的下标，1个数字的下标是0
// dp[i] = (dp[i-1] + m%i) % i，数字个数是变化的，m是固定的
var lastRemaining = function (n, m) {
  let dp = [];
  dp[0] = 0;
  dp[1] = 0;
  for (let i = 2; i <= n; i++) {
    let x = dp[i - 1];
    dp[i] = (x + (m % i)) % i;
  }
  return dp[i];
};

// 降维
// 假设有函数f(n)表示n个人最终剩下人的编号
// f(n)=(m+f(n-1))%n
// f(1) = 0
var lastRemaining = function (n, m) {
  let ans = 0;
  for (let i = 2; i <= n; i++) {
    ans = (ans + m) % i;
  }
  return ans;
};
